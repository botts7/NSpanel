substitutions:
  device_name: NSPanel 1

# Example config.yaml
esphome:
  name: nspanel-1
  comment: $device_name
  on_boot:
    priority: -100
    then:
      - wait_until: 
          api.connected:
      - delay: 10s
      - lambda: |- 
          if (id(light_1_binary).state) {
            id(disp1).set_component_value("Lights.bt1",1);
          } else {
            id(disp1).set_component_value("Lights.bt1",0);
          }
      - component.update: disp1
      - lambda: |- 
          if (id(light_2_binary).state) {
            id(disp1).set_component_value("Lights.bt2",1);
          } else {
            id(disp1).set_component_value("Lights.bt2",0);
          }
      - component.update: disp1  
      - lambda: |- 
          if (id(light_3_binary).state) {
            id(disp1).set_component_value("Lights.bt3",1);
          } else {
            id(disp1).set_component_value("Lights.bt3",0);
          }
      - component.update: disp1
      - lambda: |- 
          if (id(light_4_binary).state) {
            id(disp1).set_component_value("Lights.bt4",1);
          } else {
            id(disp1).set_component_value("Lights.bt4",0);
          }
      - component.update: disp1
      - lambda: |- 
          if (id(light_5_binary).state) {
            id(disp1).set_component_value("Lights.bt5",1);
          } else {
            id(disp1).set_component_value("Lights.bt5",0);
          }
      - component.update: disp1
      - lambda: |- 
          if (id(light_6_binary).state) {
            id(disp1).set_component_value("Lights.bt6",1);
          } else {
            id(disp1).set_component_value("Lights.bt6",0);
          }
      - component.update: disp1      
      - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
      - lambda: id(disp1).set_component_text_printf("Home.date", "%i-%02i-%02i", id(homeassistant_time).now().year, id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);
      - lambda: id(disp1).set_component_text_printf("Home.temp", "%.1f", id(current_temperature).state);
      - lambda: id(disp1).set_component_text_printf("Home.tempfl", "%.1f", id(temp_feelslike).state);     
      - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);       
      - lambda: |- 
          const int val = id(set_temp_number).state;
          id(disp1).send_command_printf("ThermSlide.x0.val=%d", val);      
esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password  
  use_address: xxx.xxx.xxx.xxx


time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("Home.date", "%02i-%02i-%02i", id(homeassistant_time).now().year, id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);
          - lambda: id(disp1).set_component_text_printf("Home.temp", "%.1f", id(current_temperature).state);
          - lambda: id(disp1).set_component_text_printf("Home.tempfl", "%.1f", id(temp_feelslike).state);
          - lambda: |- 
              const int val = id(set_temp_number).state * 10;
              id(disp1).send_command_printf("ThermSlide.x0.val=%d", val);               
          - lambda: |- 
              if (id(light_1_binary).state) {
                id(disp1).set_component_value("Lights.bt1",1);
              } else {
                id(disp1).set_component_value("Lights.bt1",0);
              }
          - component.update: disp1
          - lambda: |- 
              if (id(light_2_binary).state) {
                id(disp1).set_component_value("Lights.bt2",1);
              } else {
                id(disp1).set_component_value("Lights.bt2",0);
              }
          - component.update: disp1  
          - lambda: |- 
              if (id(light_3_binary).state) {
                id(disp1).set_component_value("Lights.bt3",1);
              } else {
                id(disp1).set_component_value("Lights.bt3",0);
              }
          - component.update: disp1
          - lambda: |- 
              if (id(light_4_binary).state) {
                id(disp1).set_component_value("Lights.bt4",1);
              } else {
                id(disp1).set_component_value("Lights.bt4",0); 
              }
          - component.update: disp1
          - lambda: |- 
              if (id(light_5_binary).state) {
                id(disp1).set_component_value("Lights.bt5",1);
              } else {
                id(disp1).set_component_value("Lights.bt5",0);
              }
          - component.update: disp1
          - lambda: |- 
              if (id(light_6_binary).state) {
                id(disp1).set_component_value("Lights.bt6",1);
              } else {
                id(disp1).set_component_value("Lights.bt6",0);
              }
          - component.update: disp1    
          - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);  
          - component.update: disp1              

script:
  - id: climate_up
    then:
      if:
        condition:
          api.connected:
        then:
          - homeassistant.service: 
              service: climate.set_temperature
              data:
                entity_id: "climate.climate"
              data_template:
                temperature: |
                  {{ state_attr("climate.climate", "temperature") + 0.5 }}
  - id: climate_down
    then:
      if:
        condition:
          api.connected:
        then:
          - homeassistant.service: 
              service: climate.set_temperature
              data:
                entity_id: "climate.climate"
              data_template:
                temperature: |
                  {{ state_attr("climate.climate", "temperature") - 0.5 }} 
                 
          

api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

logger:
  baud_rate: 0
  level: DEBUG

ota:

uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

# A reboot button is always useful
button:
  - platform: restart
    name: $device_name Restart    

binary_sensor:
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1

  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2
      
    
  - platform: nextion
    name: $device_name Light 1
#    nextion_id: set_nextion
    update_interval: 1s    
    id: light_1_button    
    page_id: 2
    component_id: 1  
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_1_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.kitchen_lights
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.kitchen_lights
            - component.update: disp1           
        
  - platform: nextion
    name: $device_name Light 2
#    nextion_id: set_nextion 
    update_interval: 1s      
    id: light_2_button    
    page_id: 2
    component_id: 2   
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_2_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.main_room_lights
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.main_room_lights
            - component.update: disp1           
               
  - platform: nextion
    name: $device_name Light 3
#    nextion_id: set_nextion
    update_interval: 1s      
    id: light_3_button    
    page_id: 2
    component_id: 3
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_3_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.alfresco
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.alfresco
            - component.update: disp1     
            
  - platform: nextion
    name: $device_name Light 4
#    nextion_id: set_nextion 
    update_interval: 1s      
    id: light_4_button
    page_id: 2
    component_id: 4
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_4_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.backyard_deck
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.backyard_deck
            - component.update: disp1            
        
  - platform: nextion
    name: $device_name Light 5
#    nextion_id: set_nextion 
    update_interval: 1s      
    id: light_5_button    
    page_id: 2
    component_id: 5
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_5_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.porch
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.porch
            - component.update: disp1           
    
  - platform: nextion
    name: $device_name Light 6
#    nextion_id: set_nextion 
#    update_interval: 1s      
    id: light_6_button    
    page_id: 2
    component_id: 6
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(light_6_binary).state;'
          then:
            - homeassistant.service:
                service: light.turn_off
                data:
                  entity_id: light.bedroom
            - component.update: disp1
          else:
            - homeassistant.service:
                service: light.turn_on
                data:
                  entity_id: light.bedroom
            - component.update: disp1          


  - platform: nextion
    name: $device_name Temp Up
#    nextion_id: set_nextion 
#    update_interval: 1s      
    id: temp_up_button    
    page_id: 8
    component_id: 3  
    internal: true    
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(temp_up_button).state;'
          then:
            - script.execute: climate_up   
            - component.update: disp1   
           
    
  - platform: nextion
    name: $device_name Temp Down
#    nextion_id: set_nextion 
    update_interval: 1s        
    id: temp_down_button    
    page_id: 8
    component_id: 4 
    internal: true    
    on_press:
      then:
        if:
          condition:
            lambda: 'return id(temp_down_button).state;'
          then:
            - script.execute: climate_down 
            - component.update: disp1          
    
  - platform: homeassistant
    id: temp_up_binary
    entity_id: climate.climate
    on_state:
      then:
        - lambda: |- 
            if (id(temp_up_binary).state) {
              id(disp1).set_component_value("temp_up_button",1);
            } else {
              id(disp1).set_component_value("temp_up_button",0);   
            }
        - lambda: |- 
            const int val = id(set_temp_number).state * 10;
            id(disp1).send_command_printf("ThermSlide.x0.val=%d", val);             
        - component.update: disp1 
        
  - platform: homeassistant
    id: temp_down_binary
    entity_id: climate.climate
    on_state:
      then:
        - lambda: |- 
            if (id(temp_down_binary).state) {
              id(disp1).set_component_value("temp_down_button",1);
            } else {
              id(disp1).set_component_value("temp_down_button",0);   
            }
        - lambda: |- 
            const int val = id(set_temp_number).state * 10;
            id(disp1).send_command_printf("ThermSlide.x0.val=%d", val);
        - component.update: disp1 

  - platform: nextion
    name: $device_name Climate Mapping
#    nextion_id: set_nextion 
#    update_interval: 1s      
    id: slider    
    page_id: 8
    component_id: 11  
    internal: true    
    on_state:
      then:
        if:
          condition:
            lambda: 'return id(slider).state;'
          then:
            - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);  
            - component.update: disp1   

        
  - platform: homeassistant
    id: light_1_binary
    entity_id: light.kitchen_lights
    on_state:
      then:
        - lambda: |- 
            if (id(light_1_binary).state) {
              id(disp1).set_component_value("light_1_button",1);
            } else {
              id(disp1).set_component_value("light_1_button",0);   
            }
        - component.update: disp1
        
  - platform: homeassistant
    id: light_2_binary
    entity_id: light.main_room_lights
    on_state:
      then:
        - lambda: |- 
            if (id(light_2_binary).state) {
              id(disp1).set_component_value("light_2_button",1);
            } else {
              id(disp1).set_component_value("light_2_button",0);   
            }
        - component.update: disp1               

  - platform: homeassistant
    id: light_3_binary
    entity_id: light.alfresco
    on_state:
      then:
        - lambda: |- 
            if (id(light_3_binary).state) {
              id(disp1).set_component_value("light_3_button",1);
            } else {
              id(disp1).set_component_value("light_3_button",0);   
            }
        - component.update: disp1 
        
  - platform: homeassistant
    id: light_4_binary
    entity_id: light.backyard_deck
    on_state:
      then:
        - lambda: |- 
            if (id(light_4_binary).state) {
              id(disp1).set_component_value("light_4_button",1);
            } else {
              id(disp1).set_component_value("light_4_button",0);   
            }
        - component.update: disp1        
        
  - platform: homeassistant
    id: light_5_binary
    entity_id: light.porch
    on_state:
      then:
        - lambda: |- 
            if (id(light_5_binary).state) {
              id(disp1).set_component_value("light_5_button",1);
            } else {
              id(disp1).set_component_value("light_5_button",0);   
            }
        - component.update: disp1        
        
  - platform: homeassistant
    id: light_6_binary
    entity_id: light.bedroom
    on_state:
      then:
        - lambda: |- 
            if (id(light_6_binary).state) {
              id(disp1).set_component_value("light_6_button",1);
            } else {
              id(disp1).set_component_value("light_6_button",0);   
            }
        - component.update: disp1                



output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

switch:
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22

  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  - platform: gpio
    name: $device_name Screen Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  - platform: template
    name: $device_name Energy Saving Mode
    id: eco_mode
    entity_category: config
    restore_state: true
    optimistic: true

rtttl:
  id: buzzer
  output: buzzer_out

sensor:



  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    
  - platform: uptime
    name: $device_name Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                int seconds = round(id(uptime_sensor).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? to_string(days) + "d " : "") +
                  (hours ? to_string(hours) + "h " : "") +
                  (minutes ? to_string(minutes) + "m " : "") +
                  (to_string(seconds) + "s")
                ).c_str();

  - platform: wifi_signal
    name: $device_name WiFi Signal Sensor
    update_interval: 60s
    
    
  - platform: homeassistant
    id: current_temperature
    entity_id: weather.openweathermap
    attribute: temperature
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Home.temp", "%.1f", id(current_temperature).state);
        
  - platform: homeassistant
    id: temp_feelslike
    entity_id: weather.openweathermap
    attribute: humidity
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Home.tempfl", "%.1f", id(temp_feelslike).state);

  - platform: homeassistant
    id: set_temp
    entity_id: climate.climate
    attribute: temperature
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);      
        - component.update: disp1 
        
  - platform: homeassistant
    id: set_temp_number
    entity_id: climate.climate
    attribute: temperature
    on_value:
      # Push it to the display
       then:      
          - lambda: |- 
              const int val = id(set_temp_number).state * 10;
              id(disp1).send_command_printf("ThermSlide.x0.val=%d", val);
          - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);                
          - component.update: disp1    
          - logger.log: "Updated Set Temp"          

  - platform: homeassistant
    id: ha_climate_slider
    entity_id: climate.climate
    attribute: temperature
    on_value:
       then:
          - lambda: |- 
              const int val = id(ha_climate_slider).state;
              id(disp1).send_command_printf("ThermSlide.h0.val=%i", val);
          - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);                
          - component.update: disp1   
          - logger.log: "Updated Climate Slider"
          
          


text_sensor:
#  - platform: homeassistant
#    id: t2_text
#    entity_id: sensor.nextion_text
#    on_value:
#      # Push it to the display
#      then:
#        - lambda: id(disp1).set_component_text_printf("ThermSlide.t2", "%.1f", id(set_temp).state);     


  - platform: homeassistant
    id: n0_number
    entity_id: sensor.nspanel_set_temp

  - platform: template
    name: $device_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  - platform: version
    name: $device_name ESPHome Version

  - platform: homeassistant
    id: music_artist
    entity_id: media_player.kitchen_display
    attribute: media_artist
    on_value:
      then:
        - lambda: id(disp1).set_component_text_printf("Music.music_sn", "%s", id(music_artist).state.c_str());

  - platform: homeassistant
    id: music_title
    entity_id: media_player.kitchen_display
    attribute: media_title
    on_value:
      then:
        - lambda: id(disp1).set_component_text_printf("Music.music_an", "%s", id(music_title).state.c_str());
        
  - platform: homeassistant
    id: light_1
    entity_id: light.kitchen_lights
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt1", "%s", id(light_1).state.c_str());
        
  - platform: homeassistant
    id: light_2
    entity_id: light.main_room_lights
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt2", "%s", id(light_2).state.c_str());     
        
  - platform: homeassistant
    id: light_3
    entity_id: light.alfresco
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt3", "%s", id(light_3).state.c_str());          
        
  - platform: homeassistant
    id: light_4
    entity_id: light.backyard_deck
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt4", "%s", id(light_4).state.c_str());             
        
  - platform: homeassistant
    id: light_5
    entity_id: light.porch
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt5", "%s", id(light_5).state.c_str());       
        
  - platform: homeassistant
    id: light_6
    entity_id: light.bedroom
    attribute: friendly_name
    on_value:
      # Push it to the display
      then:
        - lambda: id(disp1).set_component_text_printf("Lights.bt6", "%s", id(light_6).state.c_str());       

  - platform: homeassistant
    id: slide_text
    entity_id: sensor.nextiondim_text        

        
  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun

  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.openweathermap
    on_value:
      then:
        - lambda: |-
            int symbol=5; // 5 is a empty box.
            if (id(weather_symbol).state == "clear-night") {
              symbol=6;
            } else if (id(weather_symbol).state == "cloudy") {
              symbol=7;
              if (id(sun_sun).state == "below_horizon") {
                symbol=8;
              }
            } else if (id(weather_symbol).state == "fog") {
              symbol=9;
            } else if (id(weather_symbol).state == "hail" || id(weather_symbol).state == "snowy-rainy") {
              symbol=10;
            } else if (id(weather_symbol).state == "lightning") {
              symbol=11;
            } else if (id(weather_symbol).state == "lightning-rainy" || id(weather_symbol).state == "exceptional") {
              symbol=12;
              if (id(sun_sun).state == "below_horizon") {
                symbol=13;
              }
            } else if (id(weather_symbol).state == "partlycloudy") {
              symbol=14;
              if (id(sun_sun).state == "below_horizon") {
                symbol=8;
              }
            } else if (id(weather_symbol).state == "pouring") {
              symbol=15;
            } else if (id(weather_symbol).state == "rainy") {
              symbol=16;
            } else if (id(weather_symbol).state == "snowy") {
              symbol=17;
            } else if (id(weather_symbol).state == "sunny") {
              symbol=18;
            } else if (id(weather_symbol).state == "windy" || id(weather_symbol).state == "windy-variant") {
              symbol=19;              
            }
            id(disp1).send_command_printf("Home.weather_symbol.pic=%i", symbol);
    
number:
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
 
 
## not working        
#  - platform: template
#    name: $device_name Climate Temp
#    id: ClimateTemp
#    entity_category: config
#    unit_of_measurement: '°C'
#    min_value: 10
#    max_value: 30
#    step: 1
#    initial_value: 30
#    set_action:
#      then:
#       - lambda: 'id(disp1).set_component_text_printf(ThermSlide.h0,"%s",id(ClimateTemp).state);'      

        
      
# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: http://xxx.xxx.xxx.xxx:8123/local/hmi.tft  
   
    # A little fun...
    on_setup:
      then:
        - number.set:
            id: brightness
            value: 30
#  - platform: nextion
#    update_interval: 1s  
#    lambda: |-
#      it.set_wait_for_ack(false);
#      it.set_component_text("TempSlide.t2", id(t2_text).state.c_str());            
#  - platform: nextion
#    id: set_nextion
#    update_interval: 1s
#    lambda: |-
#     //online
#     it.set_wait_for_ack(false);

#        - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
